#!/usr/bin/env Rscript

options(bitmapType='cairo') # needed to avoid X11 issue

suppressPackageStartupMessages(library("argparse"))
suppressPackageStartupMessages(library("tidyverse"))

parser = ArgumentParser()
parser$add_argument("--vif_report", help="final counts file", required=TRUE, nargs=1)
parser$add_argument("--bam", help="alignments in sorted bam file", required=TRUE, nargs=1)

parser$add_argument("--output_prefix", help="output prefix for png and tsv filenames", required=TRUE, nargs=1)

args = parser$parse_args()

vif_report = args$vif_report
virus_seqlens_file = args$virus_seqlens
bam_file = args$bam
output_prefix = args$output_prefix

bam_index = paste0(bam_file, ".bai")
if (! file_test('-f', bam_index) ) {
    ## must create it.
    cmd = paste("samtools index", bam_file)
    ret = system(cmd)
    if (ret != 0) {
        stop(paste("Error, problem running command: ", cmd))
    }
}




get_virus_mappings = function(data) {

    host_chroms = c(c(1:22), 'X', 'Y', 'M')

    data_condensed = bind_rows(
        data %>% select (chr=chrA, coord=coordA, orient=orientA, counts=total),
        data %>% select(chr=chrB, coord=coordB, orient=orientB, counts=total)
    )

    data_condensed$chr = str_replace(data_condensed$chr, "chr", "")

    virus_mappings = data_condensed %>% filter(! chr %in% host_chroms)

    return(virus_mappings)

}

run_command = function(cmd) {
   message(cmd)
   ret = system(cmd)
   if (ret != 0) {
       stop (paste("Error, cmd: ", cmd, " died wit ret ", ret))
   }
}


data = read.table(vif_report, header=T, stringsAsFactors=FALSE, sep="\t")
virus_mappings = get_virus_mappings(data)


idxstats_filename = paste0(bam_file, ".idxstats")
cmd = paste("samtools idxstats", bam_file, ">", idxstats_filename)
run_command(cmd)

idxstats = read.table(idxstats_filename, header=F, sep="\t", stringsAsFactors=F)
colnames(idxstats) = c('virus', 'seqlen', 'mapped', 'unmapped')

counts_per_virus = virus_mappings %>% rename(virus=chr) %>% group_by(virus) %>% summarize_at(vars(counts), list(chim_reads=sum))
virus_count_info = full_join(idxstats, counts_per_virus, by='virus')

virus_count_info = virus_count_info %>% filter(mapped > 0 | chim_reads > 0) %>% select(virus, seqlen, mapped, chim_reads) %>% arrange(desc(mapped))
virus_count_info[is.na(virus_count_info)] = 0

virus_mappings_summary_file = paste0(output_prefix, ".virus_read_counts_summary.tsv")
write.table(virus_count_info, file=virus_mappings_summary_file, quote=F, sep="\t", row.names=F)


pdf_filename = paste0(output_prefix, ".virus_coverage_plots.pdf")
pdf(pdf_filename)

p = virus_count_info %>% gather(key=map_type, value=read_count, c(mapped, chim_reads)) %>% ggplot(aes(x=virus, y=read_count)) + geom_col(aes(fill=map_type), position='dodge') + ggtitle("Virus-mapped and chimeric read counts")
plot(p)

p = virus_count_info %>% gather(key=map_type, value=read_count, c(mapped, chim_reads)) %>% ggplot(aes(x=virus, y=read_count)) + geom_col(aes(fill=map_type), position='dodge') + scale_y_log10() +  ggtitle("Virus-mapped and chimeric read counts (log10scale)")

plot(p)

virus_count_info = virus_count_info %>% filter(mapped > 0)

for (virus in virus_count_info$virus) {
    message("-examining coverage depth for virus:", virus)
    depth_file = paste0(virus, ".depth.tsv")
    cmd = paste("set -eou pipefail && samtools view -h ", bam_file, virus, " | samtools depth - >", depth_file)
    run_command(cmd)

    if (file.size(depth_file) > 0) {
        depth_data = read.table(depth_file, header=F, sep="\t",)[,c(2,3)]
        colnames(depth_data) = c('pos', 'depth')

        seqlen = idxstats$seqlen[which(idxstats$virus == virus)]

        allpos = data.frame(pos = 1:seqlen)

        depth_data = left_join(allpos, depth_data, by='pos')
        depth_data$depth[is.na(depth_data$depth)] = 0

        p = depth_data %>% ggplot(aes(x=pos, y=depth)) + geom_line() + ggtitle(paste0("Viral Genome Depth of Coverage for [", virus, "]"))
        plot(p)
    }
}



